signature,body,docstring,is_single_expression,is_test,0-20,100+,20-50,50-100
fun test4(collection: Collection<A<*>>),id(newA() in collection) id(newA<Int>() in collection),"Processes elements in the given collection by creating new instances of type A and checks if they exist in the collection. Parameter 'collection' is a collection of generic type A.""",False,True,False,False,True,False
fun markFiles(files: Iterable<File>),"markFilesImpl(files, currentRound = false) { it.exists() }","Marks files as processed if they exist using a helper implementation. Parameter 'files' is an iterable of File objects.""",False,False,False,False,True,False
fun main(),val c: A = A.ENTRY val c2: String? = c.ENTRY val c3: String? = A.ANOTHER.ENTRY,"Initializes constants from entries of class A and prints them.""",False,False,True,False,False,False
fun TargetId(module: Module),"TargetId(module.getModuleName(), module.getModuleType())","Generates a target identifier using module name and type. Parameter 'module' is an instance of Module containing metadata.""",False,False,False,False,True,False
fun process(declaration: FirDeclaration),processSingle(declaration) while (queue.isNotEmpty()) { processSingle(queue.removeFirst()) },"Processes a declaration and iterates through a queue to process each item. Parameter 'declaration' is an instance of FirDeclaration.""",False,False,False,False,True,False
fun test2(),var x: MutableList<Int>? = mutableListOf(1) x!! x[if (true) { x = null; 0 } else 0] = 11 <!UNSAFE_CALL!>x[0]<!>.inv(),"Tests mutable list operations with nullability checks and conditional access.""",False,True,True,False,False,False
fun foo(),"val lst = listOf<List<*>>(listOf(""A""), listOf(42), emptyList()) <expr>lst[0]</expr>","Creates a list of lists with different element types and accesses the first element.""",False,False,True,False,False,False
fun <T>plus(elements: Collection<T>),var index = size val result = copyOfUninitializedElements(index + elements.size) for (element in elements) result[index++] = element return result,"Adds elements to a collection and returns the result. The 'elements' parameter is a collection of type T.""",False,False,False,False,True,False
fun createArgument(@NonNls text: String),"= createCallArguments(""($text)"").arguments.first()!!","Creates a function call argument from the provided text. Parameter 'text' is a string representing the argument.""",True,False,False,False,True,False
fun <T: PsiElement>findChildByType(i: Int),if (i == 42) JetOperationReferenceExpression() as T else throw Exception(),"Finds a child element by type based on a condition. Parameter 'i' is an integer that determines the type to be returned.""",False,False,False,False,True,False
"fun check(condition: Boolean, message: String)","if (!condition) { throw IllegalArgumentException(""Invalid pattern '$pattern' - $message"") }","Checks a condition and throws an exception with a message if the condition is false. Parameters are 'condition' (a Boolean) and 'message' (a String describing the failure).""",False,False,False,False,False,True
"fun <D>transformDeclarations(transformer: FirTransformer<D>, data: D)","declarations.transformInplace(transformer, data) return this","Transforms declarations in-place using a transformer and associated data. Parameters are 'transformer' (a transformation function) and 'data' (transformation context).""",False,False,False,False,False,True
fun isPossiblyAffectedByAllOpen(),!isAnnotationType && !isInterface && kotlinOrigin.annotationEntries.isNotEmpty(),"Determines if a type is possibly affected by being open, based on annotations and type characteristics.""",False,False,False,False,True,False
fun until(to: UByte),if (to <= UByte.MIN_VALUE) return UIntRange.EMPTY return this.toUInt() .. (to - 1u).toUInt(),"Generates a range up to a specified UByte value, excluding the value itself. Parameter 'to' is the upper limit UByte.""",False,False,True,False,False,False
"fun visitUIntValue(value: UIntValue, data: Nothing?)",dataStream.writeInt(KotlinConstantValueKind.UINT.ordinal) dataStream.writeInt(value.value),"Writes a UInt value and its kind to a data stream. Parameters are 'value' (the UIntValue to write) and 'data' (additional context, unused here).""",False,False,False,False,False,True
fun testNonAbiChangeInLib_changeMethodBody_tracked(gradleVersion: GradleVersion),super.testNonAbiChangeInLib_changeMethodBody_tracked(gradleVersion),"Tests non-ABI changes in a library's method body, tracked over different Gradle versions. Parameter 'gradleVersion' specifies the version of Gradle used.""",False,True,False,True,False,False
"fun contentEquals(other: Map<*, *>)",= _size == other.size && containsAllEntries(other.entries),"Checks content equality with another map by comparing size and entry content. Parameter 'other' is the map to compare against.""",True,False,False,False,True,False
fun test_1(),fun Int.transform(): Int = 1 fun A.transform(): Int { return x.transform() } val y = 1 y.transform(),"Defines and tests transformation functions for Int and A types, applying transformations to a variable.""",False,True,True,False,False,False
fun hashCode(),return (name.hashCode() * 31 + getter.hashCode()) * 31 + setter.hashCode(),"Calculates a hash code based on the hash codes of name, getter, and setter properties.""",False,False,True,False,False,False
fun box(),"assertEquals(123, test(listOf(0, 0, 0, 0))) return ""OK""","Tests a function with assertions and returns ""OK"" if successful.""",False,False,True,False,False,False
fun test(),"if (e == null) return val x = when (e) { SomeEnum.A -> ""a"" SomeEnum.B -> ""B"" }","Tests enum handling with null check and uses a when expression to assign values based on enum cases.""",False,True,True,False,False,False
fun iterator(),"= properties.map { (name, value) -> val safeValue = if (isSafeProperty(name)) doEscape(value) else HIDDEN_VALUE NameAndSafeValue(name, safeValue) }.iterator()","Creates an iterator over properties, applying a safety filter on values. Returns a custom iterator for property name and processed value pairs.""",True,False,True,False,False,False
fun case_9(z: Any?),"val y = z.run { this as Class } <!DEBUG_INFO_EXPRESSION_TYPE(""Class"")!>y<!> <!DEBUG_INFO_EXPRESSION_TYPE(""Class"")!>y<!>.fun_1()","Casts an arbitrary object to a specific class and performs operations on it, showcasing type inference and debug information.""",False,False,True,False,False,False
fun box(),"foo(16) val nonConst = 16 foo(nonConst) assertEquals(""16\n16\n"", sb.toString()) return ""OK""","Tests function calls with constants and variables, asserts output, and returns ""OK"".""",False,False,True,False,False,False
fun sum(),var sum: Float = 0.0f for (element in this) { sum += element } return sum,"Calculates the sum of elements in a collection, assuming elements are Floats. Returns the sum.""",False,False,True,False,False,False
"fun mapSignature(f: FunctionDescriptor, kind: OwnerKind, skipGenericSignature: Boolean)","return mapSignature(f, null, kind, skipGenericSignature, false)","Maps a function's signature with options to skip generic signatures. Parameters include the function descriptor, kind of owner, and a boolean to skip generic signatures.""",False,False,False,True,False,False
"fun newNode(nodeInfo: NodeInfo, node: DataFlowIR.Node?)","= PointsToGraphNode(nodeInfo, node).also { allNodes.add(it) }","Creates a new graph node for data flow analysis and adds it to a list of all nodes. Parameters are 'nodeInfo' (metadata about the node) and 'node' (the data flow node, optional).""",True,False,False,False,False,True
fun buildPackageDirective(init: FirPackageDirectiveBuilder.() -> Unit),"contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) } return FirPackageDirectiveBuilder().apply(init).build()","Builds a package directive using a provided initialization block that is guaranteed to be called exactly once. Parameter 'init' is a lambda that configures the package directive.""",False,False,False,False,False,True
fun test4(),"val nullableAny: Any? = """" val savedSmartCastResult = (nullableAny!= null && nullableAny is String?) if(savedSmartCastResult) { nullableAny.length }","Tests nullable smart casting and length retrieval based on a condition that checks type and nullability.""",False,True,True,False,False,False
fun <K : Out<C>>main(),"val foo = Foo<K>() Bar<Out<B>>().takeFoo(foo) // error in 1.3.72, no error in 1.4.31","Main function testing generic constraints with error demonstration in specific Kotlin versions. Generic parameters 'K' extends 'Out<C>' and operations involve classes 'Foo' and 'Bar'.""",False,False,True,False,False,False
fun case_4(),"val x: Int? = null return when (x == null) { true -> { <!DEBUG_INFO_EXPRESSION_TYPE(""kotlin.Int? & kotlin.Nothing?"")!>x<!> } else -> null }","Tests conditional logic with nullable types, demonstrating type inference in debug mode and handling of null cases.""",False,False,True,False,False,False
"fun <D>transformBody(transformer: FirTransformer<D>, data: D)","body = body?.transform(transformer, data) return this","Transforms a body element using a given transformer and data. Parameters are 'transformer' (a transformation function) and 'data' (transformation context).""",False,False,False,False,False,True
fun irThis(),"= IrGetValueImpl(startOffset, endOffset, loadFunc.dispatchReceiverParameter!!.symbol)","Generates an IR (Intermediate Representation) value getter for a function's dispatch receiver. Utilizes IR specific classes and methods.""",True,False,True,False,False,False
fun bar(arg: Any?),arg <!USELESS_CAST!>as? Any<!> ?: return arg.hashCode(),"Checks if an argument is non-null and computes its hash code; returns early if null. Parameter 'arg' can be any object.""",False,False,True,False,False,False
fun <T>runTwice(block: () -> T),"contract { callsInPlace(block, InvocationKind.AT_LEAST_ONCE) } block() return block();","Executes a block of code at least twice and returns the result of the last execution. Parameter 'block' is a function that returns a value of type T.""",False,False,False,False,True,False
fun falseWhenString(x: Any?),contract { returns(false) implies (x is String) } return x !is String,"Determines if a given object is not a string using a contract that specifies the implications of the function's boolean return value. Parameter 'x' can be any object.""",False,False,False,False,True,False
fun testFunctionCallSmartcast(fn: (() -> Unit)?),if (fn == null) return <!DEBUG_INFO_SMARTCAST!>fn<!>(),"Executes a nullable function parameter if it is not null, utilizing Kotlin's smart cast feature. Parameter 'fn' is a nullable function.""",False,True,False,False,False,True
"fun visitGetObjectValue(expression: IrGetObjectValue, data: IrDeclaration?)","= wrap(expression, data) { // TODO what if symbol is unbound? expression.symbol.defaultType.printTypeWithNoIndent() }","Visits an IR object value and optionally wraps the expression to handle unbound symbols, printing the type without indentation. Parameters 'expression' (an IR object value) and 'data' (additional contextual information, optional).""",True,False,False,True,False,False
"fun main(x: Column<Long?>, y: Double)","x <!NONE_APPLICABLE!>less<!> y // error in 1.7.20, no error in 1.7.0","Main function that tests type compatibility between a nullable Long column and a Double, highlighting a specific version change in error behavior.""",False,False,False,False,True,False
fun getPrimitiveType(),"= getPrimitiveOrUnsignedType(idSignatureToPrimitiveType, shortNameToPrimitiveType)","Retrieves a primitive or unsigned type based on identification signatures and short names using helper functions.""",True,False,True,False,False,False
fun loadTestDataWithoutDiagnostics(file: File),"= loadTestData(file, DIAGNOSTIC_IN_TESTDATA_PATTERN, SPEC_LINKED_TESTDATA_PATTERN)","Loads test data from a file without diagnostics according to specified patterns. Parameter 'file' is a File object containing the test data.""",True,True,False,False,False,True
fun get(index: Int),"AbstractList.checkElementIndex(index, size) return this@asList[index]","Gets an element at a specified index from a list, performing an index check. Parameter 'index' is the position of the element in the list.""",False,False,True,False,False,False
fun calculateExpectedTypeForSuspendConvertedArgumentMap(substitutor: NewTypeSubstitutor?),"expectedTypeForSuspendConvertedArgumentMap = calculateExpectedTypeForConvertedArguments( resolvedCallAtom.argumentsWithSuspendConversion, substitutor )","Calculates expected types for arguments that have undergone suspend conversion using a substitutor. Parameter 'substitutor' is an optional mechanism to replace types.""",False,False,False,True,False,False
fun test(),super.<!UNRESOLVED_REFERENCE!>extension<!>(null) // Call to an extension function,"Tests calling an unresolved extension function with null as an argument, demonstrating handling of unresolved references.""",False,True,True,False,False,False
fun test2(),var b: B? = B() b <!UNSAFE_OPERATOR_CALL!>+=<!> B(),"Tests adding two instances of type B, handling potential unsafe calls and operator overloads.""",False,True,True,False,False,False
fun getFieldsForParameters(classSymbol: FirClassSymbol<*>),return classSymbol.fir.declarations .filterIsInstance<FirJavaField>() .filter { it.isFieldAllowed() },"Retrieves fields from a class symbol that are allowed based on certain conditions. Parameter 'classSymbol' is a symbol representing a class.""",False,False,False,False,False,True
"fun scheduleAtFixedRate(time: Date, period: Long, crossinline action: TimerTask.() -> Unit)","val task = timerTask(action) scheduleAtFixedRate(task, time, period) return task","Schedules a repeated action at a fixed rate starting at a specified time. Parameters are 'time' (when to start), 'period' (interval between actions), and 'action' (the task to be executed).""",False,False,False,True,False,False
fun <T>isIncomplete(),= this.reports.any { it.code == ScriptDiagnostic.incompleteCode },"Checks if an element is incomplete based on diagnostic codes. The 'T' parameter is the type of the element being checked.""",True,False,True,False,False,False
"fun getContributedDescriptors(kindFilter: DescriptorKindFilter, nameFilter: (Name) -> Boolean)",= members.filter { kindFilter.accepts(it) && nameFilter(it.name) },"Retrieves descriptors that match a specified kind and name filter. Parameters 'kindFilter' filters the type of descriptors, and 'nameFilter' tests names against a condition.""",True,False,False,True,False,False
fun renderReflectionTarget(expression: IrFunctionReference),"if (expression.symbol == expression.reflectionTarget) ""<same>"" else expression.reflectionTarget?.renderReference()","Renders a reflection target for an IR function reference, comparing symbols to determine if the target is the same as the reference or needs rendering. Parameter 'expression' is an IR function reference.""",False,False,False,False,False,True
fun testExecuteAfter10InMainToWorkerNoYield(),"= testExecuteAfter10(InMainToWorker, NoYield)","Tests asynchronous execution after a delay in a specific threading context without yielding, using predefined threading and yielding configurations.""",True,True,False,False,False,True
fun myMap(x: List<Int>),x myMap { return@myMap } return 0,"Applies a custom map operation to a list of integers and returns a fixed value. Parameter 'x' is the list of integers.""",False,False,True,False,False,False
"fun contentEquals(other: CharSequence?, ignoreCase: Boolean)",if (ignoreCase) contentEqualsIgnoreCaseImpl(other) else contentEquals(other),"Compares the content of the calling object to another CharSequence, optionally ignoring case. Parameters are 'other' (the CharSequence to compare against) and 'ignoreCase' (a boolean indicating if case should be ignored).""",False,False,False,False,False,True
fun getJdk11(),"= Jvm.forHome(File(System.getProperty(""jdk11Home"")))","Retrieves a JVM instance for JDK 11 based on a system property indicating the JDK's home directory.""",True,False,True,False,False,False
"fun recordLookup(name: Name, location: LookupLocation)","c.components.lookupTracker.record(location, packageDescriptor, name)","Records a lookup operation for a name at a specific location. Parameters are 'name' (the name being looked up) and 'location' (the context of the lookup).""",False,False,False,False,False,True
fun buildAllAdaptersRecursively(elements: CAdapterExportedElements),val top = elements.scopes.single() assert(top.kind == ScopeKind.TOP) top.generateCAdapters(this::buildCAdapter),"Builds C language adapters recursively for exported elements from a single top-level scope. Parameter 'elements' encapsulates the scopes and elements to be processed.""",False,False,False,False,False,True
fun test(x: String?),return foo { if (x == null) myExit() <!DEBUG_INFO_SMARTCAST!>x<!> },"Executes a closure that exits if 'x' is null; otherwise, it processes 'x', which is smart cast to non-nullable. Parameter 'x' is a nullable String.""",False,True,True,False,False,False
"fun createPropertyStub(descriptor: PropertyDescriptor, symbol: IrPropertySymbol)","return generator.generateProperty(offset, offset, IrDeclarationOrigin.DEFINED, descriptor, symbol)","Creates a property stub using an IR generator, descriptor, and symbol. Parameters are 'descriptor' (property descriptor), 'symbol' (IR property symbol), and 'generator' (the IR generator).""",False,False,False,True,False,False
fun shortToString(),"assertEquals(""239"", 239.toShort().toString()) assertEquals(""-32768"", Short.MIN_VALUE.toString()) assertEquals(""32767"", Short.MAX_VALUE.toString())","Converts short values to strings and asserts their string representations are as expected, handling edge cases like minimum and maximum values.""",False,False,True,False,False,False
fun test63(),var x: String? = materialize() exactlyOnce { x?.length ?: -1 x = null },"Tests nullability and conditional operations within an 'exactlyOnce' block for a materialized nullable string. Parameter 'x' is initially a nullable String potentially materialized at runtime.""",False,True,True,False,False,False
"fun getFieldForInline(node: FieldInsnNode, prefix: StackValue?)","= MethodInliner.findCapturedField(node, this).remapValue","Finds and remaps a captured field for inlining based on a node and optional prefix value. Parameters 'node' represents the field instruction node, and 'prefix' provides context for value remapping.""",True,False,False,False,False,True
fun calc(x: List<String>?),"foo(x!!.size) // Here we should have smart cast because of x!!, despite of KT-7204 fixed return x.size","Calculates and returns the size of a potentially nullable list after asserting non-null status, demonstrating smart casting. Parameter 'x' is a nullable list of strings.""",False,False,False,False,True,False
"fun alias(kClass: KClass<out FirElement>, name: String)","val realName = name.takeIf { it.startsWith(""Fir"") } ?: ""Fir$name"" registeredAliases[kClass] = realName","Creates or confirms an alias for a Kotlin class, ensuring it starts with 'Fir'. Parameters are 'kClass' (the Kotlin class) and 'name' (the proposed alias).""",False,False,False,False,False,True
fun test5(),var x: Any? = materialize() for (i in 1..10) { require(x is Int) x++ exactlyOnce { x.inc() } },"Tests increment operations within a loop and a block ensuring type safety and exclusivity of the increment operation. Parameter 'x' is a nullable object potentially containing an integer.""",False,True,True,False,False,False
fun funWithReturnsTrueAndNullCheck(value_1: Any?),contract { returns(true) implies (value_1 == null) } return value_1 == null,"Checks if a value is null returning true if it is, under a contract specifying this return implies the value is indeed null. Parameter 'value_1' is a nullable object.""",False,False,False,False,False,True
fun box(),"var x = 1 fun local1() { x++ } class A { fun bar() { local1() } } A().bar() return ""OK""","Encapsulates a test of local function usage and object method interactions within a box function, confirming state changes and returning ""OK""""",False,False,True,False,False,False
fun test_1(base: Base),"return when (base) { is A -> ""O"" is B -> ""Fail"" }","Determines the type of the base parameter and returns a string based on type checking. Parameter 'base' is an instance of Base which could be either A or B.""",False,True,True,False,False,False
fun hasConstantValue(),"val implicitConst = isFinal && isStatic && origin == IrDeclarationOrigin.IR_EXTERNAL_JAVA_DECLARATION_STUB && initializer != null return implicitConst || property.isConst"",C""hecks if a property has a constant value based on its modifiers and initialization status, considering external Java declaration origins.""",,False,False,True,False,False,False
fun foo(),"= NSAssertionHandler().handleFailureInFunction(""zzz"", ""zzz"", 0L, null, ""qzz"")","Handles a failure in a function using an assertion handler, passing static values for demonstration.""",True,False,True,False,False,False
fun visitTry(x: JsTry),printLineNumbers(x) super.visitTry(x),"Visits a JavaScript 'try' block, printing line numbers and delegating further processing to a superclass method. Parameter 'x' is a JsTry block.""",False,False,True,False,False,False
fun test_1_2(resolvedCall: ResolvedCall<in CallableDescriptor>),resolvedCall.getParameterForArgument() // should be ok,"Retrieves a parameter for an argument from a resolved call, expected to succeed without errors. Parameter 'resolvedCall' represents the resolved function or property call.""",False,True,False,False,False,True
fun last(),"if (isEmpty()) throw NoSuchElementException(""Progression $this is empty."") return this.last","Returns the last element of a progression, throwing an exception if it is empty.""",False,False,True,False,False,False
"fun callBy(args: Map<KParameter, Any?>)","TODO(""Not yet implemented"")","Placeholder for a function that processes a map of call parameters by key. Parameter 'args' is a map of KParameter keys to their values.""",False,False,False,False,True,False
fun <T>test(t: T),if (t != null) { return t<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!> } return <!ALWAYS_NULL!>t<!>!!,"Tests nullability and returns a non-null assertion of a generic parameter, demonstrating handling of potentially null inputs.""",False,True,True,False,False,False
fun test(x: Any),when (val y = x) { is String -> {} },"Tests pattern matching on the type of 'x', handling cases where 'x' is a String.""",False,True,True,False,False,False
fun <R>buildBoxProperType(fill: Box<R>.() -> String),return Box<R>().also { it.fill() },"Builds a box of type R and fills it using a provided block, returning the result of the fill function. Parameter 'fill' is a block that operates on a Box of type R and returns a String.""",False,False,False,False,False,True
fun tearDown(),super.tearDown() tempDir.toFile().deleteRecursively(),"Cleans up after tests by deleting a temporary directory and calling the superclass teardown method.""",False,False,True,False,False,False
fun elvis(b: Boolean),= buildConsumer(b) { expectConsumerString(it) } ?: materialize(),"Builds a consumer based on a boolean condition and returns a materialized default if null. Parameter 'b' is a boolean flag to guide the consumer building process.""",True,False,True,False,False,False
fun visitFile(file: File),"assertTrue(stack.last().listFiles().contains(file), file.toString()) files.add(file.relativeToOrSelf(basedir))","Visits a file, checking its existence in the last directory of a stack and adds its path relative to a base directory to a list. Parameter 'file' is the File object to be processed.""",False,False,False,False,True,False
fun load(),"val call = getterCall() ?: throw AssertionError(""No getter call for $descriptor"") return callGenerator.generateCall(startOffset, endOffset, call, origin)","Loads data by generating a call based on a getter, throwing an assertion error if the getter call is not found. Uses a call generator to process the call.""",False,False,True,False,False,False
fun visitSimpleFunction(declaration: IrSimpleFunction),declaration.overriddenSymbols = declaration.overriddenSymbols.map(resolver::getReferencedSimpleFunction) visitElement(declaration),"Visits a simple function in IR, updating its overridden symbols using a resolver and continuing with generic element visitation. Parameter 'declaration' is the function being visited.""",False,False,False,False,False,True
"fun findPathToDeclarationWithTarget(firFile: FirFile, nonLocalDeclaration: KtDeclaration,)","= collectDesignationPath( firFile = firFile, nonLocalDeclaration = nonLocalDeclaration, )?.let { it.path + it.declarationTarget }","Finds the path to a declaration within a file, potentially returning the path and the declaration target if found. Parameters are 'firFile' (the file being searched) and 'nonLocalDeclaration' (the declaration of interest).""",True,False,False,True,False,False
fun f(j: Int),fun g(i: Int) = i * i *j return g(g(j)),"Defines a nested function g that squares its input and multiplies by j, then applies g to itself with j as the argument, effectively calculating j to the fourth power.""",False,False,True,False,False,False
fun peek(n: UInt = 0u),if (n >= s.size.toUInt()) null else Ucn(s[n.toInt()].toUInt()),"Peeks at a collection at a specified unsigned integer index, returning a Unicode character number (Ucn) or null if out of bounds. Parameter 'n' is the index to peek at, defaulting to 0.""",False,False,True,False,False,False
"fun buildNativeIndexImpl(library: NativeLibrary, verbose: Boolean)","val result = NativeIndexImpl(library, verbose) return buildNativeIndexImpl(result)","Builds a native index implementation for a library with a verbosity option, recursively using an intermediate result. Parameters are 'library' (the native library) and 'verbose' (a boolean indicating verbosity).""",False,False,False,False,False,True
fun isConstructor(method: Method),"return ""<init>"" == method.name","Checks if a method is a constructor based on its name. Parameter 'method' is the method to check.""",False,False,False,False,True,False
fun testCompanionFromThisCompanion(),"js(""var ${constFromThisFileCompanion} = 1;"") js(""var "" + constFromThisFileCompanion + "" = 1;"")","Tests accessing and modifying a companion object's constant from JavaScript code embedded in Kotlin, using template and concatenation.""",False,True,False,False,True,False
fun updateClasspathFromRootsIndex(index: JvmDependenciesIndex),index.indexedRoots.forEach { projectEnvironment.addSourcesToClasspath(it.file) },"Updates the classpath for a project environment based on an index of JVM dependencies. Parameter 'index' provides the roots to be added.""",False,False,False,False,False,True
fun referencedName(),= (calleeExpression as? KtSimpleNameExpression)?.getReferencedName(),"Retrieves the name referenced by a simple name expression within a callee expression.""",True,False,True,False,False,False
fun createElvisLhsExitNode(fir: FirElvisExpression),"= ElvisLhsExitNode(currentGraph, fir, levelCounter)","Creates an exit node for the left-hand side of an Elvis expression in a control flow graph. Parameter 'fir' is the FirElvisExpression being handled.""",True,False,False,False,False,True
fun until(to: Int),if (to <= Int.MIN_VALUE) return IntRange.EMPTY return this .. (to - 1).toInt(),"Creates an integer range up to but not including the specified 'to' value, returning an empty range if 'to' is at the minimum integer value.""",False,False,True,False,False,False
fun test27(),var x: Any? = materialize() require(x is Int) runWithoutContract { x.inc() } x++,"Tests runtime materialization and manipulation of an 'Any' type, asserting its type as Int, and incrementing its value inside and outside a contract block.""",False,True,True,False,False,False
fun <reified D : FirClassifierSymbol<*>>findClassifier(name: Name),var foundSymbol: D? = null processClassifiersByName(name) { if (it is D) { foundSymbol = it } } return foundSymbol,"Finds a classifier of a specific type by name, storing the first matching instance. Parameters include 'name' (the name to search) and 'D' (the classifier type).""",False,False,False,False,False,True
fun close(),"status += ""closed"" throw MyException(""error"")","Closes a resource and updates the status to 'closed', then throws a custom exception to indicate an error occurred.""",False,False,True,False,False,False
fun getLambdaConstructorCalls(constructorSymbol: IrConstructorSymbol),lambdaConstructorCalls[constructorSymbol] ?: emptyList(),"Retrieves calls to a lambda constructor based on a symbol, returning an empty list if no calls are recorded. Parameter 'constructorSymbol' is the symbol of the constructor.""",False,False,False,False,False,True
fun irSuccess(value: IrExpression),"val createResult = symbols.kotlinResult.owner.constructors.single { it.isPrimary } return irCall(createResult).apply { putValueArgument(0, value) }","Constructs a success result for an IR expression, encapsulating it in a primary constructor call. Parameter 'value' is the expression to be wrapped.""",False,False,False,False,True,False
fun <T2>test(),class LocalClass C1<LocalClass>(),"Tests local class instantiation within a generic context, demonstrating the creation and use of a local class in a generic function.""",False,True,True,False,False,False
"fun mark(node: LighterASTNode, startOffset: Int, endOffset: Int, tree: FlyweightCapableTreeStructure<LighterASTNode>)","= markElement(getElementToMark(node, tree), startOffset, endOffset, tree, node)","Marks an AST node with specified start and end offsets within a lightweight tree structure, encapsulating node marking logic. Parameters include 'node' (the node to mark), 'startOffset' (the starting position), 'endOffset' (the ending position), and 'tree' (the structure containing the node).""",True,False,False,True,False,False
fun require(request: String),"return resolve(request)?.canonicalPath ?: error(""Cannot find node module ""$request"" in ""$this"""")","Resolves a module request to its canonical path, throwing an error if the module cannot be found. Parameter 'request' is the name or path of the node module being requested.""",False,False,False,False,True,False
fun box(),"if (y == 42L) { return ""OK"" } return y.toString()","Checks if a value 'y' equals 42L and returns ""OK"" if true; otherwise, returns the string representation of 'y'.""",False,False,True,False,False,False
